#include<stdio.h>
#include<stdlib.h>

struct TreeNode{
  int data;
  struct TreeNode* left;
  struct TreeNode* right;
};

struct TreeNode* createNode(int value){
  struct TreeNode* newNode =(struct TreeNode*)malloc
                            (sizeof(struct TreeNode));

  newNode->data = value;
  newNode->left = NULL;
  newNode->right = NULL;
  return newNode;
}

void preOrder (struct TreeNode* root){
  if(root == NULL){
    return;
  }
  printf("%d",root->data);
  preOrder(root->left);
  preOrder(root->right);
}

void inOrder (struct TreeNode* root){
  if(root == NULL){
    return;
  }
  inOrder(root->left);
  printf("%d",root->data);
  preOrder(root->right);
}

void postOrder (struct TreeNode* root){
  if(root == NULL){
    return;
  }
  postOrder(root->left);
  postOrder(root->right);
  printf("%d",root->data);
}

int maxDepth(struct TreeNode* root){
  if(root == NULL){
    return 0;
  }
  int leftDepth = maxDepth(root->left);
  int rightDepth = maxDepth(root->right);
  return(leftDepth > rightDepth) ? (leftDepth+1):
        (rightDepth + 1);
  
}

int main(){
  struct TreeNode* root = createNode(1);
  root->left = createNode(2);
  root->right = createNode(3);
  root->left->left = createNode(4);
  root->left->right = createNode(5);
  root->right->left = createNode(6);
  root->right->right = createNode(7);
  
  printf("Pre-Order: ");
  preOrder(root);
  printf("\n");
  
  printf("In-Order: ");
  inOrder(root);
  printf("\n");
  
  printf("Post-Order: ");
  postOrder(root);
  printf("\n");
  return 0;
}


