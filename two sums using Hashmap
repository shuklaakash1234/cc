#include <stdio.h>
#include <stdlib.h>

// Structure to represent a key-value pair in the hashmap
struct Pair {
    int key;
    int value;
};

// Structure to represent a hashmap
struct HashMap {
    struct Pair** array;
    int capacity;
};

// Function to create a new Pair
struct Pair* createPair(int key, int value) {
    struct Pair* newPair = (struct Pair*)malloc(sizeof(struct Pair));
    newPair->key = key;
    newPair->value = value;
    return newPair;
}

// Function to create a new HashMap
struct HashMap* createHashMap(int capacity) {
    struct HashMap* map = (struct HashMap*)malloc(sizeof(struct HashMap));
    map->capacity = capacity;
    map->array = (struct Pair**)malloc(capacity * sizeof(struct Pair*));
    for (int i = 0; i < capacity; i++) {
        map->array[i] = NULL;
    }
    return map;
}

// Function to insert a key-value pair into the hashmap
void insert(struct HashMap* map, int key, int value) {
    int index = abs(key) % map->capacity;
    while (map->array[index] != NULL) {
        index = (index + 1) % map->capacity;
    }
    map->array[index] = createPair(key, value);
}

// Function to retrieve the value associated with a key from the hashmap
int getValue(struct HashMap* map, int key) {
    int index = abs(key) % map->capacity;
    while (map->array[index] != NULL) {
        if (map->array[index]->key == key) {
            return map->array[index]->value;
        }
        index = (index + 1) % map->capacity;
    }
    return -1; // Key not found
}

// Function to find the two indices that sum up to the target
int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    struct HashMap* map = createHashMap(numsSize);

    for (int i = 0; i < numsSize; i++) {
        int complement = target - nums[i];
        int complementIndex = getValue(map, complement);
        if (complementIndex != -1) {
            int* result = (int*)malloc(2 * sizeof(int));
            result[0] = complementIndex;
            result[1] = i;
            *returnSize = 2;
            return result;
        }
        insert(map, nums[i], i);
    }

    *returnSize = 0;
    return NULL;
}

int main() {
    int nums[] = {2, 7, 11, 15};
    int target = 9;
    int numsSize = sizeof(nums) / sizeof(nums[0]);
    int returnSize;
    int* result = twoSum(nums, numsSize, target, &returnSize);
    if (result != NULL) {
        printf("Indices: %d, %d\n", result[0], result[1]);
        free(result);
    } else {
        printf("No two sum solution.\n");
    }
    return 0;
}
